import { jsx as _jsx, jsxs as _jsxs } from "hono/jsx/jsx-runtime";
import { For, Show } from "solid-js";
function CreaterChat(props) {
    const formLocal = (event) => {
        event.preventDefault();
        props.setForm(event);
    };
    return (_jsxs("div", { class: "flex h-screen w-full max-w-screen-2xl m-auto overflow-hidden", children: [_jsx("aside", { class: "w-full lg:w-1/4 bg-white dark:bg-gray-900 rounded-lg mr-5 shadow-md", children: _jsxs("div", { class: "h-full flex flex-col", children: [_jsx("div", { class: "flex p-10", children: _jsx("div", { class: "mb-4 text-3xl font-semi-bold text-gray-900 dark:text-white", children: "Chat" }) }), _jsx("ul", { class: "list-decimal list-inside", children: _jsx(For, { each: props.items, children: (item) => (_jsx("li", { onclick: () => props.onUserClicked(item.user), class: "cursor-pointer px-4 py-2 rounded-lg hover:bg-indigo-100 text-white", children: item.user.name })) }) })] }) }), _jsxs("section", { class: "relative max-h h-full bg-white rounded-lg w-full flex flex-col dark:bg-900 lg:flex", children: [_jsx("div", { class: "w-full border bg-black font-extrabold text-white text-center", children: props.user.name }), _jsx("div", { class: "flex-1 overflow-y-scroll p-5 space-y-5", children: _jsx(For, { each: props.messages, children: (item) => (_jsx("div", { class: `flex ${item.id === props.userId ? 'justify-start' : 'justify-end'}`, children: _jsx("div", { class: `p-4 rounded-lg max-w-xl ${item.id === props.userId ? 'bg-indigo-800 text-white rounded-l-lg' : 'bg-gray-100 text-black rouned-r-lg'}`, children: _jsx("span", { class: "text-sm", children: item.id === props.userId
                                            ? `${props.user.name}: ${item.message}`
                                            : `You: ${item.message}` }) }) })) }) }), _jsx(Show, { when: props.messages, children: _jsx("div", { class: "grid grid-rows-2 p-4", children: _jsxs("form", { onSubmit: formLocal, class: "flex items-center space-x-4", children: [_jsx("input", { onChange: (e) => props.setNewMessage(e.currentTarget.value), value: props.newMessage, placeholder: "Type a message", type: "text", class: "w-full focus:outline-none focus:placeholder-gray-400 text-gray-600 rounded-full py-3 px-4 border" }), _jsx("button", { class: "inline-flex items-center justify-center rounded-full h-12 w-12 transition duration-500 ease-in-out text-black bg-indigo-300", type: "submit", children: "Send" })] }) }) })] })] }));
}
export default CreaterChat;
