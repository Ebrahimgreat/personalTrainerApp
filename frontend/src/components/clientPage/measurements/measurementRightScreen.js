import { jsx as _jsx, jsxs as _jsxs } from "hono/jsx/jsx-runtime";
import { Show, For } from "solid-js";
import Button from "../../ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "../../ui/dialog";
function MeasurementScreen(props) {
    return (_jsxs("div", { class: "bg-white shadow-xl", children: [_jsx("h1", { class: "text-center font-bold text-2xl text-gray-800 mb-6", children: props.measurement.name }), _jsx(Show, { when: props.measurement.measurement.length == 0, children: _jsx("p", { class: "text-center text-gray-500", children: "No measurements Found" }) }), _jsx(Show, { when: props.measurement?.measurement.length > 0, children: _jsx(For, { each: props.measurement.measurement, children: (item, key) => _jsxs("div", { class: "flex flex-row justify-between items-center bg-gray-100 p-4", children: [_jsx(Dialog, { children: _jsxs("form", { children: [_jsx(DialogTrigger, { children: _jsx(Button, { variant: "outline", children: "Edit" }) }), _jsxs(DialogContent, { class: "sm:max-w-[425px] bg-white", children: [_jsxs(DialogHeader, { children: [_jsx(DialogTitle, { children: "Edit Measurement" }), _jsx(DialogDescription, { children: "Make changes" })] }), _jsx("div", { class: "grid gap-4", children: _jsxs("div", { class: "grid gap-3", children: [_jsx("label", { children: "Date" }), _jsx("input", { onChange: (e) => props.updateMeasurement(key(), 'created_at', e.currentTarget.value, item.id), value: new Date(item.created_at).toLocaleDateString(), type: "date" }), _jsx("label", { children: "Value" }), _jsx("input", { onChange: (e) => props.updateMeasurement(key(), 'value', e.currentTarget.value, item.id), value: item.value, type: "number", class: "border" })] }) }), _jsx(DialogFooter, { children: _jsx(Button, { onClick: () => props.deleteMeasurement(item.id), children: "Delete" }) })] })] }) }), _jsx("p", { class: "text-sm text-gray-500", children: new Date(item.created_at).toLocaleDateString() }), _jsx("p", { class: "text-lg font-semibold text-gray-700", children: item.value }), _jsxs(Show, { when: item.trend, children: [_jsx("span", { children: "Trend" }), _jsx("p", { class: "text-lg font-semibold", children: item.trend })] })] }) }) })] }));
}
export default MeasurementScreen;
