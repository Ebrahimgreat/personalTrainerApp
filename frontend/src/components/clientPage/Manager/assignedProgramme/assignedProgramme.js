import { jsx as _jsx, jsxs as _jsxs } from "hono/jsx/jsx-runtime";
import { Button } from "../../../../components/ui/button";
import { createSignal, For, Show } from "solid-js";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "../../../ui/dialog";
import AssignProgramme from "../../programme/assignProgramme";
function AssignedProgramme(props) {
    const [dialogOpen, setDialogOpen] = createSignal(false);
    return (_jsxs("div", { class: "bg-white h-full shadow-md p-8 w-full mx-auto flex flex-col overflow-y-auto", children: [_jsxs("div", { class: "flex flex-row justify-between", children: [_jsx(Dialog, { open: dialogOpen(), onOpenChange: setDialogOpen, children: _jsxs(DialogTrigger, { children: [_jsx(Button, { children: "Modify" }), _jsxs(DialogContent, { class: "bg-white w-full h-full max-w-none", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: "Assign New Programme" }) }), _jsx(AssignProgramme, { updateProgramme: (item) => props.updateProgramme(item), programme_id: props.programme_id, programme: props.allProgramme }), _jsx(DialogFooter, { children: _jsx(Button, { onclick: () => setDialogOpen(false), children: "Cancel" }) })] })] }) }), _jsx("h1", { class: "font-bold text-lg", children: "Programmes Enrolled" })] }), _jsx(Show, { when: !props.programme, children: "No Programme Enrolled" }), _jsx(Show, { when: props.programme && props.programme.id, children: _jsxs("div", { class: "overflow-y-auto", children: [_jsx("h2", { class: "font-semibold", children: props.programme.programme.name }), _jsx("span", { class: "font-bold", children: props.programme.status }), _jsx(For, { each: props.programme.programme.programmeWorkout, children: (workout) => _jsxs("div", { class: "mt-2 space-y-1 pl-4", children: [_jsx("h4", { class: "text-gray-600 font-medium", children: workout.name }), _jsx(For, { each: workout.programmeDetails, children: (detail) => _jsxs("div", { class: "flex flex-row gap-x-4 text-sm", children: [_jsxs("span", { class: "font-semibold", children: [detail.exercise.name, "-"] }), _jsxs("span", { children: ["Sets: ", detail.sets] }), _jsxs("span", { children: ["Rep Range: ", detail.repRange] })] }) })] }) }), _jsx("div", { class: "border-b", children: _jsx("p", { class: "text-center" }) })] }) })] }));
}
export default AssignedProgramme;
