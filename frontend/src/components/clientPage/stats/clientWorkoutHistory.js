import { jsx as _jsx, jsxs as _jsxs } from "hono/jsx/jsx-runtime";
import { Show, For } from "solid-js";
function ClientWorkoutHistory(props) {
    return (_jsxs("div", { class: "h-full overflow-y-auto bg-white shadow-xl", children: [_jsx("div", { children: _jsxs(Show, { when: props.selectAction == -1, children: ["Please Add Workout to select Exercises", _jsx("div", { class: "flex items-center justify-center", children: _jsx("img", { class: "rounded-full border h-16 w-16  object-cover bg-black", src: '/src/assets/icons/exerciseSvg.svg' }) })] }) }), _jsxs(Show, { when: props.selectAction !== -1, children: [_jsxs("div", { class: "border-b px-6 py-3", children: [_jsxs("div", { class: "flex flex-row justify-around mr-10 ml-10", children: [_jsxs("select", { value: props.equipmentSelected, onchange: (e) => props.setEquipment(e.currentTarget.value), class: "shadow-appearance-none border border-gray-300 rounded-xl focus:outline-none focus:ring-2 py-2 px-3 mb-2", children: [_jsx("option", { selected: true, children: "Equipment" }), _jsx(For, { each: props.equipment, children: (item) => _jsx("option", { children: item }) }), _jsx("option", { children: "No option" })] }), _jsxs("select", { class: "shadow-appearance-none border border-gray-300 rounded-xl focus:outline-none focus:ring-2  px-3 mb-2", onchange: (e) => props.setTypeSelected(e.currentTarget.value), value: props.typeSelected, onChange: (e) => props.setTypeSelected(e.currentTarget.value), children: [_jsx("option", { children: "Type" }), _jsx(For, { each: props.types, children: (item) => _jsx("option", { children: item }) }), _jsx("option", { children: "No option" })] })] }), _jsx("input", { disabled: props.selectAction == -1, value: props.searchExercise, onChange: (e) => props.setSearchSelected(e.currentTarget.value), class: " disabled:cursor-not-allowed  shadow appearance-none border w-full border-gray-300 rounded-xl focus:outline-none focus:ring-2 py-2 px-3 mb-2 ", type: "text", placeholder: "search Exercise" })] }), _jsx("ul", { class: "", children: _jsx(For, { each: props.workout, children: (item, count) => _jsxs("div", { children: [_jsx(For, { each: item.workout, children: (value) => _jsx("div", { children: _jsx("p", { onclick: () => props.updatingExercise(value), class: "cursor-pointer", children: value.exercise.name }) }) }), _jsx("span", { class: "fonst-extralight block sm", children: item.target })] }) }) })] })] }));
}
export default ClientWorkoutHistory;
