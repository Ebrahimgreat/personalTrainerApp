import * as solid_js from 'solid-js';
import { JSX, Accessor } from 'solid-js';
import { SetStoreFunction } from 'solid-js/store';

interface ToasterStore {
    rendered: Toast[];
    queued: Toast[];
    toasterConfig: Config;
    isWindowBlurred: boolean;
}
interface Toaster$1 {
    toasterId?: string;
    store: ToasterStore;
    setStore: SetStoreFunction<ToasterStore>;
    counter: number;
}
type RegisteredToaster = Omit<Toaster$1, "toasterId"> & {
    toasterId: string;
};
type ToastType = "default" | "success" | "error" | "loading" | "warning" | "info";
interface ToastProviderOptions extends Omit<ToasterOptions, "toasterId"> {
    children: JSX.Element;
}
type ToasterOptions = Partial<Omit<Config, "content" | "contentType" | "id">>;
interface ToastOptions extends Partial<Omit<Config, "content" | "state" | "positionX" | "positionY" | "offsetX" | "offsetY" | "gutter" | "limit" | "toasterStyle" | "reverseToastOrder" | "pauseOnWindowInactive" | "renderOnWindowInactive" | "contentType">> {
    toasterId?: string;
}
type ToastOptionsUpdate = RequireAtLeastOne<ToastOptions & {
    content?: ToastContent;
}>;
type ToastContent = string | JSX.Element | ((toast: Toast) => JSX.Element | string);
interface ToastPromiseMessages {
    pending: string | JSX.Element;
    success: string | JSX.Element | ((data: any) => string | JSX.Element);
    error: string | JSX.Element | ((error: any) => string | JSX.Element);
}
interface ToasterContextType {
    toasters: Map<string, Toaster$1>;
    providerProps: Config;
    registerToaster: (args: Toaster$1) => RegisteredToaster;
    getToaster: (id?: string) => Toaster$1;
    unregisterToaster: (id: string) => void;
}
interface ToastActions {
    notify: (content?: ToastContent, options?: ToastOptions) => {
        id: string;
        ref: HTMLElement | null;
        progressControls: ProgressControls;
    };
    update: (options: ToastOptionsUpdate) => {
        id: string | undefined;
        ref: HTMLElement | null;
        progressControls: ProgressControls;
    } | undefined;
    dismiss: (options?: {
        id?: string;
        toasterId?: string;
        reason?: string;
        keepQueued?: boolean;
    }) => void;
    remove: (options?: {
        id?: string;
        toasterId?: string;
        keepQueued?: boolean;
    }) => void;
    promise: <T>(promise: Promise<T>, messages: ToastPromiseMessages, options?: ToastOptions) => Promise<T>;
    getQueue: (toasterId?: string) => Toast[];
    clearQueue: (toasterId?: string) => void;
}
interface ToastConstructor {
    store: ToasterStore;
    setStore: SetStoreFunction<ToasterStore>;
    toastConfig?: Partial<Config>;
}
interface ProgressControls {
    play: () => void;
    pause: () => void;
    reset: () => void;
    progress: Accessor<number>;
}
interface ToastContext {
    theme: string | undefined | null;
    type: ToastType;
}
interface Config {
    id?: string;
    toasterId?: string;
    content?: ToastContent;
    contentType?: "static" | "dynamic";
    theme: string | undefined | null;
    type: ToastType;
    duration: number | false;
    onEnter: string | undefined;
    enterDuration: number;
    onExit: string | undefined;
    exitDuration: number;
    onIdle: string | undefined;
    positionY: "top" | "bottom";
    positionX: "left" | "right" | "center";
    offsetX: number;
    offsetY: number;
    gutter: number;
    limit: number | false;
    reverseToastOrder: boolean;
    pauseOnHover: boolean;
    pauseOnWindowInactive: boolean;
    renderOnWindowInactive: boolean;
    class: string | ((args: ToastContext) => string);
    style: JSX.CSSProperties | ((args: ToastContext) => JSX.CSSProperties) | undefined;
    wrapperClass: string | ((args: ToastContext) => string);
    wrapperStyle: JSX.CSSProperties | ((args: ToastContext) => JSX.CSSProperties) | undefined;
    enterCallback: (() => void) | null;
    updateCallback: (() => void) | null;
    exitCallback: ((reason?: boolean | string) => void) | null;
    showDismissButton: boolean;
    dismissButtonClass: string | ((args: ToastContext) => string);
    dismissButtonStyle: JSX.CSSProperties | ((args: ToastContext) => JSX.CSSProperties) | undefined;
    dismissOnClick: boolean;
    toasterStyle: Omit<JSX.CSSProperties, "top" | "bottom" | "left" | "right" | "justify-content" | "align-items" | "pointer-events"> | null;
    showProgressBar: boolean;
    progressBarClass: string | ((args: ToastContext) => string);
    progressBarStyle: JSX.CSSProperties | ((args: ToastContext) => JSX.CSSProperties) | undefined;
    showIcon: boolean;
    icon: ((args: ToastContext) => JSX.Element) | JSX.Element | null;
    dragToDismiss: boolean;
    dragTreshold: number;
    ariaLive: "off" | "assertive" | "polite";
    role: "status" | "alert";
}
type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
}[Keys];

declare function createProgressManager(toast?: Toast, callback?: () => void): {
    progress: solid_js.Accessor<number>;
    play: () => void;
    pause: () => void;
    update: (newDuration: number | false) => void;
    reset: () => void;
};

declare class Toast {
    private setStore;
    private dragManager;
    private ownProperties;
    store: ToasterStore;
    toastConfig: Config;
    ref: HTMLElement | null;
    state: "entering" | "idle" | "exiting";
    renderedAt: number | undefined;
    progressManager: ReturnType<typeof createProgressManager>;
    isPaused: boolean;
    isPausedByUser: boolean;
    offset: number;
    constructor(args: ToastConstructor);
    init(): void;
    private lifecycle;
    update(args: Partial<Config>): void;
    dismiss(reason?: string | boolean, animated?: boolean): void;
    remove(): void;
    patch(args: Config): void;
    render(): JSX.Element;
}

declare function Toaster(props: ToasterOptions): solid_js.JSX.Element;

declare function ToastProvider(props: ToastProviderOptions): solid_js.JSX.Element;
declare function useToast(targetToaster?: string): {
    notify: (content?: ToastContent, options?: ToastOptions) => {
        id: string;
        ref: HTMLElement | null;
        progressControls: ProgressControls;
    };
    update: (options: ToastOptionsUpdate) => {
        id: string | undefined;
        ref: HTMLElement | null;
        progressControls: ProgressControls;
    } | undefined;
    dismiss: (options?: {
        id?: string;
        toasterId?: string;
        reason?: string;
        keepQueued?: boolean;
    }) => void;
    remove: (options?: {
        id?: string;
        toasterId?: string;
        keepQueued?: boolean;
    }) => void;
    promise: <T>(promise: Promise<T>, messages: ToastPromiseMessages, options?: ToastOptions) => Promise<T>;
    getQueue: (toasterId?: string) => Toast[];
    clearQueue: (toasterId?: string) => void;
};

export { type Config, type ProgressControls, Toast, type ToastActions, type ToastContent, type ToastOptions, type ToastOptionsUpdate, type ToastPromiseMessages, ToastProvider, type ToastProviderOptions, Toaster, type ToasterContextType, type ToasterOptions, type ToasterStore, useToast };
